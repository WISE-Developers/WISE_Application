// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cwfgmProject.proto

package ca.wise.project.proto;

/**
 * Protobuf enum {@code WISE.ProjectProto.GlobalStatistics}
 */
public enum GlobalStatistics
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <code>DATE_TIME = 0;</code>
   */
  DATE_TIME(0),
  /**
   * <code>ELAPSED_TIME = 1;</code>
   */
  ELAPSED_TIME(1),
  /**
   * <code>TIME_STEP_DURATION = 2;</code>
   */
  TIME_STEP_DURATION(2),
  /**
   * <code>TEMPERATURE = 3;</code>
   */
  TEMPERATURE(3),
  /**
   * <code>DEW_POINT = 4;</code>
   */
  DEW_POINT(4),
  /**
   * <code>RELATIVE_HUMIDITY = 5;</code>
   */
  RELATIVE_HUMIDITY(5),
  /**
   * <code>WIND_SPEED = 6;</code>
   */
  WIND_SPEED(6),
  /**
   * <code>WIND_DIRECTION = 7;</code>
   */
  WIND_DIRECTION(7),
  /**
   * <code>PRECIPITATION = 8;</code>
   */
  PRECIPITATION(8),
  /**
   * <code>HFFMC = 9;</code>
   */
  HFFMC(9),
  /**
   * <code>HISI = 10;</code>
   */
  HISI(10),
  /**
   * <code>DMC = 11;</code>
   */
  DMC(11),
  /**
   * <code>DC = 12;</code>
   */
  DC(12),
  /**
   * <code>HFWI = 13;</code>
   */
  HFWI(13),
  /**
   * <code>BUI = 14;</code>
   */
  BUI(14),
  /**
   * <code>FFMC = 15;</code>
   */
  FFMC(15),
  /**
   * <code>ISI = 16;</code>
   */
  ISI(16),
  /**
   * <code>FWI = 17;</code>
   */
  FWI(17),
  /**
   * <code>TIMESTEP_AREA = 18;</code>
   */
  TIMESTEP_AREA(18),
  /**
   * <code>TIMESTEP_BURN_AREA = 19;</code>
   */
  TIMESTEP_BURN_AREA(19),
  /**
   * <code>TOTAL_AREA = 20;</code>
   */
  TOTAL_AREA(20),
  /**
   * <pre>
   **
   * Total area of the fire. (sq. metres)
   * </pre>
   *
   * <code>TOTAL_BURN_AREA = 21;</code>
   */
  TOTAL_BURN_AREA(21),
  /**
   * <pre>
   **
   * Rate of change in the fire area. (sq. metres)
   * </pre>
   *
   * <code>AREA_GROWTH_RATE = 22;</code>
   */
  AREA_GROWTH_RATE(22),
  /**
   * <pre>
   **
   * Total exterior fire perimeter, including active and inactive portions. (metres)
   * </pre>
   *
   * <code>EXTERIOR_PERIMETER = 23;</code>
   */
  EXTERIOR_PERIMETER(23),
  /**
   * <pre>
   **
   * Rate of change in the exterior perimeter growth rate. (metres per minute)
   * </pre>
   *
   * <code>EXTERIOR_PERIMETER_GROWTH_RATE = 24;</code>
   */
  EXTERIOR_PERIMETER_GROWTH_RATE(24),
  /**
   * <pre>
   **
   * Portion of the fire front considered active (interior and exterior) (where 1 or both vertices are active). (metres)
   * </pre>
   *
   * <code>ACTIVE_PERIMETER = 25;</code>
   */
  ACTIVE_PERIMETER(25),
  /**
   * <pre>
   **
   * Rate of change in the active perimeter growth rate. (metres per minute)
   * </pre>
   *
   * <code>ACTIVE_PERIMETER_GROWTH_RATE = 26;</code>
   */
  ACTIVE_PERIMETER_GROWTH_RATE(26),
  /**
   * <pre>
   **
   * Total fire perimeter, including interior and exterior and active/inactive portions. (metres)
   * </pre>
   *
   * <code>TOTAL_PERIMETER = 27;</code>
   */
  TOTAL_PERIMETER(27),
  /**
   * <pre>
   **
   * Rate of change in the total perimeter growth rate. (metres per minute)
   * </pre>
   *
   * <code>TOTAL_PERIMETER_GROWTH_RATE = 28;</code>
   */
  TOTAL_PERIMETER_GROWTH_RATE(28),
  /**
   * <code>FI_LT_10 = 29;</code>
   */
  FI_LT_10(29),
  /**
   * <code>FI_10_500 = 30;</code>
   */
  FI_10_500(30),
  /**
   * <code>FI_500_2000 = 31;</code>
   */
  FI_500_2000(31),
  /**
   * <code>FI_2000_4000 = 32;</code>
   */
  FI_2000_4000(32),
  /**
   * <code>FI_4000_10000 = 33;</code>
   */
  FI_4000_10000(33),
  /**
   * <code>FI_GT_10000 = 34;</code>
   */
  FI_GT_10000(34),
  /**
   * <code>ROS_0_1 = 35;</code>
   */
  ROS_0_1(35),
  /**
   * <code>ROS_2_4 = 36;</code>
   */
  ROS_2_4(36),
  /**
   * <code>ROS_5_8 = 37;</code>
   */
  ROS_5_8(37),
  /**
   * <code>ROS_9_14 = 38;</code>
   */
  ROS_9_14(38),
  /**
   * <code>ROS_GT_15 = 39;</code>
   */
  ROS_GT_15(39),
  /**
   * <pre>
   **
   * Maximum rate of spread calculated from Dr. Richards' ellipse equations (metres per minute).
   * </pre>
   *
   * <code>MAX_ROS = 40;</code>
   */
  MAX_ROS(40),
  /**
   * <code>MAX_FI = 41;</code>
   */
  MAX_FI(41),
  /**
   * <pre>
   **
   * Maximum flame length (metres), based on ROS from Dr. Richards' ellipse equations.
   * </pre>
   *
   * <code>MAX_FL = 42;</code>
   */
  MAX_FL(42),
  /**
   * <pre>
   **
   * Maximum crown fraction burned (unitless), based on ROS from Dr. Richards' ellipse equations.
   * </pre>
   *
   * <code>MAX_CFB = 43;</code>
   */
  MAX_CFB(43),
  /**
   * <pre>
   **
   * Maximum crown fuel consumption (kg/m2), based on ROS from Dr. Richards' ellipse equations.
   * </pre>
   *
   * <code>MAX_CFC = 44;</code>
   */
  MAX_CFC(44),
  /**
   * <pre>
   **
   * Maximum surface fuel consumption (kg/m2), based on ROS from Dr. Richards' ellipse equations.
   * </pre>
   *
   * <code>MAX_SFC = 45;</code>
   */
  MAX_SFC(45),
  /**
   * <pre>
   **
   * Maximum total fuel consumption (kg/m2), based on ROS from Dr. Richards' ellipse equations.
   * </pre>
   *
   * <code>MAX_TFC = 46;</code>
   */
  MAX_TFC(46),
  /**
   * <code>TOTAL_FUEL_CONSUMED = 47;</code>
   */
  TOTAL_FUEL_CONSUMED(47),
  /**
   * <code>CROWN_FUEL_CONSUMED = 48;</code>
   */
  CROWN_FUEL_CONSUMED(48),
  /**
   * <code>SURFACE_FUEL_CONSUMED = 49;</code>
   */
  SURFACE_FUEL_CONSUMED(49),
  /**
   * <pre>
   **
   * Number of active vertices defining the fire perimeter(s).
   * </pre>
   *
   * <code>NUM_ACTIVE_VERTICES = 50;</code>
   */
  NUM_ACTIVE_VERTICES(50),
  /**
   * <pre>
   **
   * Number of vertices defining the fire perimeter(s).
   * </pre>
   *
   * <code>NUM_VERTICES = 51;</code>
   */
  NUM_VERTICES(51),
  /**
   * <pre>
   **
   * Total, cumulative number of verticies defining the simulation's perimeters.
   * </pre>
   *
   * <code>CUMULATIVE_VERTICES = 52;</code>
   */
  CUMULATIVE_VERTICES(52),
  /**
   * <pre>
   **
   * Cumulative number of active vertices defining the fire perimeter(s).
   * </pre>
   *
   * <code>CUMULATIVE_ACTIVE_VERTICES = 53;</code>
   */
  CUMULATIVE_ACTIVE_VERTICES(53),
  /**
   * <pre>
   **
   * Number of fire fronts (interior and exterior) which have at least 1 active vertex.
   * </pre>
   *
   * <code>NUM_ACTIVE_FRONTS = 54;</code>
   */
  NUM_ACTIVE_FRONTS(54),
  /**
   * <pre>
   **
   * Number of fire fronts (interior and exterior).
   * </pre>
   *
   * <code>NUM_FRONTS = 55;</code>
   */
  NUM_FRONTS(55),
  /**
   * <code>MEMORY_USED_START = 56;</code>
   */
  MEMORY_USED_START(56),
  /**
   * <code>MEMORY_USED_END = 57;</code>
   */
  MEMORY_USED_END(57),
  /**
   * <code>NUM_TIMESTEPS = 58;</code>
   */
  NUM_TIMESTEPS(58),
  /**
   * <code>NUM_DISPLAY_TIMESTEPS = 59;</code>
   */
  NUM_DISPLAY_TIMESTEPS(59),
  /**
   * <code>NUM_EVENT_TIMESTEPS = 60;</code>
   */
  NUM_EVENT_TIMESTEPS(60),
  /**
   * <code>NUM_CALC_TIMESTEPS = 61;</code>
   */
  NUM_CALC_TIMESTEPS(61),
  /**
   * <pre>
   **
   * Number of real-time (clock) seconds to calculate the current display time step.
   * </pre>
   *
   * <code>TICKS = 62;</code>
   */
  TICKS(62),
  /**
   * <pre>
   **
   * Number of real-time (clock) seconds to calculate all display time steps.
   * </pre>
   *
   * <code>PROCESSING_TIME = 63;</code>
   */
  PROCESSING_TIME(63),
  /**
   * <pre>
   **
   * Number of simulated seconds that burning was allowed since the start of the simulation.
   * </pre>
   *
   * <code>GROWTH_TIME = 64;</code>
   */
  GROWTH_TIME(64),
  /**
   * <code>RAZ = 65;</code>
   */
  RAZ(65),
  /**
   * <code>BURN_GRID = 66;</code>
   */
  BURN_GRID(66),
  /**
   * <code>FIRE_ARRIVAL_TIME = 67;</code>
   */
  FIRE_ARRIVAL_TIME(67),
  /**
   * <code>FIRE_ARRIVAL_TIME_MIN = 68;</code>
   */
  FIRE_ARRIVAL_TIME_MIN(68),
  /**
   * <code>FIRE_ARRIVAL_TIME_MAX = 69;</code>
   */
  FIRE_ARRIVAL_TIME_MAX(69),
  /**
   * <code>HROS = 70;</code>
   */
  HROS(70),
  /**
   * <code>FROS = 71;</code>
   */
  FROS(71),
  /**
   * <code>BROS = 72;</code>
   */
  BROS(72),
  /**
   * <code>RSS = 73;</code>
   */
  RSS(73),
  /**
   * <code>RADIATIVE_POWER = 74;</code>
   */
  RADIATIVE_POWER(74),
  /**
   * <pre>
   **
   * Maximum fire intensity, based on ROS the standard FBP equations.
   * </pre>
   *
   * <code>HFI = 75;</code>
   */
  HFI(75),
  /**
   * <pre>
   **
   * Maximum crown fraction burned (unitless), based on ROS from standard FBP equations.
   * </pre>
   *
   * <code>HCFB = 76;</code>
   */
  HCFB(76),
  /**
   * <pre>
   **
   * The current simulation time as of the end of the timestep.
   * </pre>
   *
   * <code>CURRENT_TIME = 77;</code>
   */
  CURRENT_TIME(77),
  /**
   * <pre>
   **
   * The name of the scenario that is reporting statistics.
   * </pre>
   *
   * <code>SCENARIO_NAME = 78;</code>
   */
  SCENARIO_NAME(78),
  /**
   * <code>BURN_PERCENTAGE = 79;</code>
   */
  BURN_PERCENTAGE(79),
  /**
   * <pre>
   **
   * Change in the total perimeter growth. (metres)
   * </pre>
   *
   * <code>TOTAL_PERIMETER_CHANGE = 80;</code>
   */
  TOTAL_PERIMETER_CHANGE(80),
  /**
   * <pre>
   **
   * Change in the exterior perimeter growth. (metres)
   * </pre>
   *
   * <code>EXTERIOR_PERIMETER_CHANGE = 81;</code>
   */
  EXTERIOR_PERIMETER_CHANGE(81),
  /**
   * <pre>
   **
   * Change in the active perimeter growth. (metres)
   * </pre>
   *
   * <code>ACTIVE_PERIMETER_CHANGE = 82;</code>
   */
  ACTIVE_PERIMETER_CHANGE(82),
  /**
   * <pre>
   **
   * Change in fire area. (sq. metres)
   * </pre>
   *
   * <code>AREA_CHANGE = 83;</code>
   */
  AREA_CHANGE(83),
  /**
   * <code>BURN = 84;</code>
   */
  BURN(84),
  /**
   * <code>HROS_MAP = 85;</code>
   */
  HROS_MAP(85),
  /**
   * <code>FROS_MAP = 86;</code>
   */
  FROS_MAP(86),
  /**
   * <code>BROS_MAP = 87;</code>
   */
  BROS_MAP(87),
  /**
   * <code>RSS_MAP = 88;</code>
   */
  RSS_MAP(88),
  /**
   * <code>RAZ_MAP = 89;</code>
   */
  RAZ_MAP(89),
  /**
   * <code>FMC_MAP = 90;</code>
   */
  FMC_MAP(90),
  /**
   * <code>CFB_MAP = 91;</code>
   */
  CFB_MAP(91),
  /**
   * <code>CFC_MAP = 92;</code>
   */
  CFC_MAP(92),
  /**
   * <code>SFC_MAP = 93;</code>
   */
  SFC_MAP(93),
  /**
   * <code>TFC_MAP = 94;</code>
   */
  TFC_MAP(94),
  /**
   * <code>FI_MAP = 95;</code>
   */
  FI_MAP(95),
  /**
   * <code>FL_MAP = 96;</code>
   */
  FL_MAP(96),
  /**
   * <code>CURINGDEGREE_MAP = 97;</code>
   */
  CURINGDEGREE_MAP(97),
  /**
   * <code>GREENUP_MAP = 98;</code>
   */
  GREENUP_MAP(98),
  /**
   * <code>PC_MAP = 99;</code>
   */
  PC_MAP(99),
  /**
   * <code>PDF_MAP = 100;</code>
   */
  PDF_MAP(100),
  /**
   * <code>CBH_MAP = 101;</code>
   */
  CBH_MAP(101),
  /**
   * <code>TREE_HEIGHT_MAP = 102;</code>
   */
  TREE_HEIGHT_MAP(102),
  /**
   * <code>FUEL_LOAD_MAP = 103;</code>
   */
  FUEL_LOAD_MAP(103),
  /**
   * <code>CFL_MAP = 104;</code>
   */
  CFL_MAP(104),
  /**
   * <code>GRASSPHENOLOGY_MAP = 105;</code>
   */
  GRASSPHENOLOGY_MAP(105),
  /**
   * <code>ROSVECTOR_MAP = 106;</code>
   */
  ROSVECTOR_MAP(106),
  /**
   * <code>DIRVECTOR_MAP = 107;</code>
   */
  DIRVECTOR_MAP(107),
  /**
   * <code>CRITICAL_PATH = 108;</code>
   */
  CRITICAL_PATH(108),
  /**
   * <code>CRITICAL_PATH_PERCENTAGE = 109;</code>
   */
  CRITICAL_PATH_PERCENTAGE(109),
  UNRECOGNIZED(-1),
  ;

  /**
   * <code>DATE_TIME = 0;</code>
   */
  public static final int DATE_TIME_VALUE = 0;
  /**
   * <code>ELAPSED_TIME = 1;</code>
   */
  public static final int ELAPSED_TIME_VALUE = 1;
  /**
   * <code>TIME_STEP_DURATION = 2;</code>
   */
  public static final int TIME_STEP_DURATION_VALUE = 2;
  /**
   * <code>TEMPERATURE = 3;</code>
   */
  public static final int TEMPERATURE_VALUE = 3;
  /**
   * <code>DEW_POINT = 4;</code>
   */
  public static final int DEW_POINT_VALUE = 4;
  /**
   * <code>RELATIVE_HUMIDITY = 5;</code>
   */
  public static final int RELATIVE_HUMIDITY_VALUE = 5;
  /**
   * <code>WIND_SPEED = 6;</code>
   */
  public static final int WIND_SPEED_VALUE = 6;
  /**
   * <code>WIND_DIRECTION = 7;</code>
   */
  public static final int WIND_DIRECTION_VALUE = 7;
  /**
   * <code>PRECIPITATION = 8;</code>
   */
  public static final int PRECIPITATION_VALUE = 8;
  /**
   * <code>HFFMC = 9;</code>
   */
  public static final int HFFMC_VALUE = 9;
  /**
   * <code>HISI = 10;</code>
   */
  public static final int HISI_VALUE = 10;
  /**
   * <code>DMC = 11;</code>
   */
  public static final int DMC_VALUE = 11;
  /**
   * <code>DC = 12;</code>
   */
  public static final int DC_VALUE = 12;
  /**
   * <code>HFWI = 13;</code>
   */
  public static final int HFWI_VALUE = 13;
  /**
   * <code>BUI = 14;</code>
   */
  public static final int BUI_VALUE = 14;
  /**
   * <code>FFMC = 15;</code>
   */
  public static final int FFMC_VALUE = 15;
  /**
   * <code>ISI = 16;</code>
   */
  public static final int ISI_VALUE = 16;
  /**
   * <code>FWI = 17;</code>
   */
  public static final int FWI_VALUE = 17;
  /**
   * <code>TIMESTEP_AREA = 18;</code>
   */
  public static final int TIMESTEP_AREA_VALUE = 18;
  /**
   * <code>TIMESTEP_BURN_AREA = 19;</code>
   */
  public static final int TIMESTEP_BURN_AREA_VALUE = 19;
  /**
   * <code>TOTAL_AREA = 20;</code>
   */
  public static final int TOTAL_AREA_VALUE = 20;
  /**
   * <pre>
   **
   * Total area of the fire. (sq. metres)
   * </pre>
   *
   * <code>TOTAL_BURN_AREA = 21;</code>
   */
  public static final int TOTAL_BURN_AREA_VALUE = 21;
  /**
   * <pre>
   **
   * Rate of change in the fire area. (sq. metres)
   * </pre>
   *
   * <code>AREA_GROWTH_RATE = 22;</code>
   */
  public static final int AREA_GROWTH_RATE_VALUE = 22;
  /**
   * <pre>
   **
   * Total exterior fire perimeter, including active and inactive portions. (metres)
   * </pre>
   *
   * <code>EXTERIOR_PERIMETER = 23;</code>
   */
  public static final int EXTERIOR_PERIMETER_VALUE = 23;
  /**
   * <pre>
   **
   * Rate of change in the exterior perimeter growth rate. (metres per minute)
   * </pre>
   *
   * <code>EXTERIOR_PERIMETER_GROWTH_RATE = 24;</code>
   */
  public static final int EXTERIOR_PERIMETER_GROWTH_RATE_VALUE = 24;
  /**
   * <pre>
   **
   * Portion of the fire front considered active (interior and exterior) (where 1 or both vertices are active). (metres)
   * </pre>
   *
   * <code>ACTIVE_PERIMETER = 25;</code>
   */
  public static final int ACTIVE_PERIMETER_VALUE = 25;
  /**
   * <pre>
   **
   * Rate of change in the active perimeter growth rate. (metres per minute)
   * </pre>
   *
   * <code>ACTIVE_PERIMETER_GROWTH_RATE = 26;</code>
   */
  public static final int ACTIVE_PERIMETER_GROWTH_RATE_VALUE = 26;
  /**
   * <pre>
   **
   * Total fire perimeter, including interior and exterior and active/inactive portions. (metres)
   * </pre>
   *
   * <code>TOTAL_PERIMETER = 27;</code>
   */
  public static final int TOTAL_PERIMETER_VALUE = 27;
  /**
   * <pre>
   **
   * Rate of change in the total perimeter growth rate. (metres per minute)
   * </pre>
   *
   * <code>TOTAL_PERIMETER_GROWTH_RATE = 28;</code>
   */
  public static final int TOTAL_PERIMETER_GROWTH_RATE_VALUE = 28;
  /**
   * <code>FI_LT_10 = 29;</code>
   */
  public static final int FI_LT_10_VALUE = 29;
  /**
   * <code>FI_10_500 = 30;</code>
   */
  public static final int FI_10_500_VALUE = 30;
  /**
   * <code>FI_500_2000 = 31;</code>
   */
  public static final int FI_500_2000_VALUE = 31;
  /**
   * <code>FI_2000_4000 = 32;</code>
   */
  public static final int FI_2000_4000_VALUE = 32;
  /**
   * <code>FI_4000_10000 = 33;</code>
   */
  public static final int FI_4000_10000_VALUE = 33;
  /**
   * <code>FI_GT_10000 = 34;</code>
   */
  public static final int FI_GT_10000_VALUE = 34;
  /**
   * <code>ROS_0_1 = 35;</code>
   */
  public static final int ROS_0_1_VALUE = 35;
  /**
   * <code>ROS_2_4 = 36;</code>
   */
  public static final int ROS_2_4_VALUE = 36;
  /**
   * <code>ROS_5_8 = 37;</code>
   */
  public static final int ROS_5_8_VALUE = 37;
  /**
   * <code>ROS_9_14 = 38;</code>
   */
  public static final int ROS_9_14_VALUE = 38;
  /**
   * <code>ROS_GT_15 = 39;</code>
   */
  public static final int ROS_GT_15_VALUE = 39;
  /**
   * <pre>
   **
   * Maximum rate of spread calculated from Dr. Richards' ellipse equations (metres per minute).
   * </pre>
   *
   * <code>MAX_ROS = 40;</code>
   */
  public static final int MAX_ROS_VALUE = 40;
  /**
   * <code>MAX_FI = 41;</code>
   */
  public static final int MAX_FI_VALUE = 41;
  /**
   * <pre>
   **
   * Maximum flame length (metres), based on ROS from Dr. Richards' ellipse equations.
   * </pre>
   *
   * <code>MAX_FL = 42;</code>
   */
  public static final int MAX_FL_VALUE = 42;
  /**
   * <pre>
   **
   * Maximum crown fraction burned (unitless), based on ROS from Dr. Richards' ellipse equations.
   * </pre>
   *
   * <code>MAX_CFB = 43;</code>
   */
  public static final int MAX_CFB_VALUE = 43;
  /**
   * <pre>
   **
   * Maximum crown fuel consumption (kg/m2), based on ROS from Dr. Richards' ellipse equations.
   * </pre>
   *
   * <code>MAX_CFC = 44;</code>
   */
  public static final int MAX_CFC_VALUE = 44;
  /**
   * <pre>
   **
   * Maximum surface fuel consumption (kg/m2), based on ROS from Dr. Richards' ellipse equations.
   * </pre>
   *
   * <code>MAX_SFC = 45;</code>
   */
  public static final int MAX_SFC_VALUE = 45;
  /**
   * <pre>
   **
   * Maximum total fuel consumption (kg/m2), based on ROS from Dr. Richards' ellipse equations.
   * </pre>
   *
   * <code>MAX_TFC = 46;</code>
   */
  public static final int MAX_TFC_VALUE = 46;
  /**
   * <code>TOTAL_FUEL_CONSUMED = 47;</code>
   */
  public static final int TOTAL_FUEL_CONSUMED_VALUE = 47;
  /**
   * <code>CROWN_FUEL_CONSUMED = 48;</code>
   */
  public static final int CROWN_FUEL_CONSUMED_VALUE = 48;
  /**
   * <code>SURFACE_FUEL_CONSUMED = 49;</code>
   */
  public static final int SURFACE_FUEL_CONSUMED_VALUE = 49;
  /**
   * <pre>
   **
   * Number of active vertices defining the fire perimeter(s).
   * </pre>
   *
   * <code>NUM_ACTIVE_VERTICES = 50;</code>
   */
  public static final int NUM_ACTIVE_VERTICES_VALUE = 50;
  /**
   * <pre>
   **
   * Number of vertices defining the fire perimeter(s).
   * </pre>
   *
   * <code>NUM_VERTICES = 51;</code>
   */
  public static final int NUM_VERTICES_VALUE = 51;
  /**
   * <pre>
   **
   * Total, cumulative number of verticies defining the simulation's perimeters.
   * </pre>
   *
   * <code>CUMULATIVE_VERTICES = 52;</code>
   */
  public static final int CUMULATIVE_VERTICES_VALUE = 52;
  /**
   * <pre>
   **
   * Cumulative number of active vertices defining the fire perimeter(s).
   * </pre>
   *
   * <code>CUMULATIVE_ACTIVE_VERTICES = 53;</code>
   */
  public static final int CUMULATIVE_ACTIVE_VERTICES_VALUE = 53;
  /**
   * <pre>
   **
   * Number of fire fronts (interior and exterior) which have at least 1 active vertex.
   * </pre>
   *
   * <code>NUM_ACTIVE_FRONTS = 54;</code>
   */
  public static final int NUM_ACTIVE_FRONTS_VALUE = 54;
  /**
   * <pre>
   **
   * Number of fire fronts (interior and exterior).
   * </pre>
   *
   * <code>NUM_FRONTS = 55;</code>
   */
  public static final int NUM_FRONTS_VALUE = 55;
  /**
   * <code>MEMORY_USED_START = 56;</code>
   */
  public static final int MEMORY_USED_START_VALUE = 56;
  /**
   * <code>MEMORY_USED_END = 57;</code>
   */
  public static final int MEMORY_USED_END_VALUE = 57;
  /**
   * <code>NUM_TIMESTEPS = 58;</code>
   */
  public static final int NUM_TIMESTEPS_VALUE = 58;
  /**
   * <code>NUM_DISPLAY_TIMESTEPS = 59;</code>
   */
  public static final int NUM_DISPLAY_TIMESTEPS_VALUE = 59;
  /**
   * <code>NUM_EVENT_TIMESTEPS = 60;</code>
   */
  public static final int NUM_EVENT_TIMESTEPS_VALUE = 60;
  /**
   * <code>NUM_CALC_TIMESTEPS = 61;</code>
   */
  public static final int NUM_CALC_TIMESTEPS_VALUE = 61;
  /**
   * <pre>
   **
   * Number of real-time (clock) seconds to calculate the current display time step.
   * </pre>
   *
   * <code>TICKS = 62;</code>
   */
  public static final int TICKS_VALUE = 62;
  /**
   * <pre>
   **
   * Number of real-time (clock) seconds to calculate all display time steps.
   * </pre>
   *
   * <code>PROCESSING_TIME = 63;</code>
   */
  public static final int PROCESSING_TIME_VALUE = 63;
  /**
   * <pre>
   **
   * Number of simulated seconds that burning was allowed since the start of the simulation.
   * </pre>
   *
   * <code>GROWTH_TIME = 64;</code>
   */
  public static final int GROWTH_TIME_VALUE = 64;
  /**
   * <code>RAZ = 65;</code>
   */
  public static final int RAZ_VALUE = 65;
  /**
   * <code>BURN_GRID = 66;</code>
   */
  public static final int BURN_GRID_VALUE = 66;
  /**
   * <code>FIRE_ARRIVAL_TIME = 67;</code>
   */
  public static final int FIRE_ARRIVAL_TIME_VALUE = 67;
  /**
   * <code>FIRE_ARRIVAL_TIME_MIN = 68;</code>
   */
  public static final int FIRE_ARRIVAL_TIME_MIN_VALUE = 68;
  /**
   * <code>FIRE_ARRIVAL_TIME_MAX = 69;</code>
   */
  public static final int FIRE_ARRIVAL_TIME_MAX_VALUE = 69;
  /**
   * <code>HROS = 70;</code>
   */
  public static final int HROS_VALUE = 70;
  /**
   * <code>FROS = 71;</code>
   */
  public static final int FROS_VALUE = 71;
  /**
   * <code>BROS = 72;</code>
   */
  public static final int BROS_VALUE = 72;
  /**
   * <code>RSS = 73;</code>
   */
  public static final int RSS_VALUE = 73;
  /**
   * <code>RADIATIVE_POWER = 74;</code>
   */
  public static final int RADIATIVE_POWER_VALUE = 74;
  /**
   * <pre>
   **
   * Maximum fire intensity, based on ROS the standard FBP equations.
   * </pre>
   *
   * <code>HFI = 75;</code>
   */
  public static final int HFI_VALUE = 75;
  /**
   * <pre>
   **
   * Maximum crown fraction burned (unitless), based on ROS from standard FBP equations.
   * </pre>
   *
   * <code>HCFB = 76;</code>
   */
  public static final int HCFB_VALUE = 76;
  /**
   * <pre>
   **
   * The current simulation time as of the end of the timestep.
   * </pre>
   *
   * <code>CURRENT_TIME = 77;</code>
   */
  public static final int CURRENT_TIME_VALUE = 77;
  /**
   * <pre>
   **
   * The name of the scenario that is reporting statistics.
   * </pre>
   *
   * <code>SCENARIO_NAME = 78;</code>
   */
  public static final int SCENARIO_NAME_VALUE = 78;
  /**
   * <code>BURN_PERCENTAGE = 79;</code>
   */
  public static final int BURN_PERCENTAGE_VALUE = 79;
  /**
   * <pre>
   **
   * Change in the total perimeter growth. (metres)
   * </pre>
   *
   * <code>TOTAL_PERIMETER_CHANGE = 80;</code>
   */
  public static final int TOTAL_PERIMETER_CHANGE_VALUE = 80;
  /**
   * <pre>
   **
   * Change in the exterior perimeter growth. (metres)
   * </pre>
   *
   * <code>EXTERIOR_PERIMETER_CHANGE = 81;</code>
   */
  public static final int EXTERIOR_PERIMETER_CHANGE_VALUE = 81;
  /**
   * <pre>
   **
   * Change in the active perimeter growth. (metres)
   * </pre>
   *
   * <code>ACTIVE_PERIMETER_CHANGE = 82;</code>
   */
  public static final int ACTIVE_PERIMETER_CHANGE_VALUE = 82;
  /**
   * <pre>
   **
   * Change in fire area. (sq. metres)
   * </pre>
   *
   * <code>AREA_CHANGE = 83;</code>
   */
  public static final int AREA_CHANGE_VALUE = 83;
  /**
   * <code>BURN = 84;</code>
   */
  public static final int BURN_VALUE = 84;
  /**
   * <code>HROS_MAP = 85;</code>
   */
  public static final int HROS_MAP_VALUE = 85;
  /**
   * <code>FROS_MAP = 86;</code>
   */
  public static final int FROS_MAP_VALUE = 86;
  /**
   * <code>BROS_MAP = 87;</code>
   */
  public static final int BROS_MAP_VALUE = 87;
  /**
   * <code>RSS_MAP = 88;</code>
   */
  public static final int RSS_MAP_VALUE = 88;
  /**
   * <code>RAZ_MAP = 89;</code>
   */
  public static final int RAZ_MAP_VALUE = 89;
  /**
   * <code>FMC_MAP = 90;</code>
   */
  public static final int FMC_MAP_VALUE = 90;
  /**
   * <code>CFB_MAP = 91;</code>
   */
  public static final int CFB_MAP_VALUE = 91;
  /**
   * <code>CFC_MAP = 92;</code>
   */
  public static final int CFC_MAP_VALUE = 92;
  /**
   * <code>SFC_MAP = 93;</code>
   */
  public static final int SFC_MAP_VALUE = 93;
  /**
   * <code>TFC_MAP = 94;</code>
   */
  public static final int TFC_MAP_VALUE = 94;
  /**
   * <code>FI_MAP = 95;</code>
   */
  public static final int FI_MAP_VALUE = 95;
  /**
   * <code>FL_MAP = 96;</code>
   */
  public static final int FL_MAP_VALUE = 96;
  /**
   * <code>CURINGDEGREE_MAP = 97;</code>
   */
  public static final int CURINGDEGREE_MAP_VALUE = 97;
  /**
   * <code>GREENUP_MAP = 98;</code>
   */
  public static final int GREENUP_MAP_VALUE = 98;
  /**
   * <code>PC_MAP = 99;</code>
   */
  public static final int PC_MAP_VALUE = 99;
  /**
   * <code>PDF_MAP = 100;</code>
   */
  public static final int PDF_MAP_VALUE = 100;
  /**
   * <code>CBH_MAP = 101;</code>
   */
  public static final int CBH_MAP_VALUE = 101;
  /**
   * <code>TREE_HEIGHT_MAP = 102;</code>
   */
  public static final int TREE_HEIGHT_MAP_VALUE = 102;
  /**
   * <code>FUEL_LOAD_MAP = 103;</code>
   */
  public static final int FUEL_LOAD_MAP_VALUE = 103;
  /**
   * <code>CFL_MAP = 104;</code>
   */
  public static final int CFL_MAP_VALUE = 104;
  /**
   * <code>GRASSPHENOLOGY_MAP = 105;</code>
   */
  public static final int GRASSPHENOLOGY_MAP_VALUE = 105;
  /**
   * <code>ROSVECTOR_MAP = 106;</code>
   */
  public static final int ROSVECTOR_MAP_VALUE = 106;
  /**
   * <code>DIRVECTOR_MAP = 107;</code>
   */
  public static final int DIRVECTOR_MAP_VALUE = 107;
  /**
   * <code>CRITICAL_PATH = 108;</code>
   */
  public static final int CRITICAL_PATH_VALUE = 108;
  /**
   * <code>CRITICAL_PATH_PERCENTAGE = 109;</code>
   */
  public static final int CRITICAL_PATH_PERCENTAGE_VALUE = 109;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static GlobalStatistics valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static GlobalStatistics forNumber(int value) {
    switch (value) {
      case 0: return DATE_TIME;
      case 1: return ELAPSED_TIME;
      case 2: return TIME_STEP_DURATION;
      case 3: return TEMPERATURE;
      case 4: return DEW_POINT;
      case 5: return RELATIVE_HUMIDITY;
      case 6: return WIND_SPEED;
      case 7: return WIND_DIRECTION;
      case 8: return PRECIPITATION;
      case 9: return HFFMC;
      case 10: return HISI;
      case 11: return DMC;
      case 12: return DC;
      case 13: return HFWI;
      case 14: return BUI;
      case 15: return FFMC;
      case 16: return ISI;
      case 17: return FWI;
      case 18: return TIMESTEP_AREA;
      case 19: return TIMESTEP_BURN_AREA;
      case 20: return TOTAL_AREA;
      case 21: return TOTAL_BURN_AREA;
      case 22: return AREA_GROWTH_RATE;
      case 23: return EXTERIOR_PERIMETER;
      case 24: return EXTERIOR_PERIMETER_GROWTH_RATE;
      case 25: return ACTIVE_PERIMETER;
      case 26: return ACTIVE_PERIMETER_GROWTH_RATE;
      case 27: return TOTAL_PERIMETER;
      case 28: return TOTAL_PERIMETER_GROWTH_RATE;
      case 29: return FI_LT_10;
      case 30: return FI_10_500;
      case 31: return FI_500_2000;
      case 32: return FI_2000_4000;
      case 33: return FI_4000_10000;
      case 34: return FI_GT_10000;
      case 35: return ROS_0_1;
      case 36: return ROS_2_4;
      case 37: return ROS_5_8;
      case 38: return ROS_9_14;
      case 39: return ROS_GT_15;
      case 40: return MAX_ROS;
      case 41: return MAX_FI;
      case 42: return MAX_FL;
      case 43: return MAX_CFB;
      case 44: return MAX_CFC;
      case 45: return MAX_SFC;
      case 46: return MAX_TFC;
      case 47: return TOTAL_FUEL_CONSUMED;
      case 48: return CROWN_FUEL_CONSUMED;
      case 49: return SURFACE_FUEL_CONSUMED;
      case 50: return NUM_ACTIVE_VERTICES;
      case 51: return NUM_VERTICES;
      case 52: return CUMULATIVE_VERTICES;
      case 53: return CUMULATIVE_ACTIVE_VERTICES;
      case 54: return NUM_ACTIVE_FRONTS;
      case 55: return NUM_FRONTS;
      case 56: return MEMORY_USED_START;
      case 57: return MEMORY_USED_END;
      case 58: return NUM_TIMESTEPS;
      case 59: return NUM_DISPLAY_TIMESTEPS;
      case 60: return NUM_EVENT_TIMESTEPS;
      case 61: return NUM_CALC_TIMESTEPS;
      case 62: return TICKS;
      case 63: return PROCESSING_TIME;
      case 64: return GROWTH_TIME;
      case 65: return RAZ;
      case 66: return BURN_GRID;
      case 67: return FIRE_ARRIVAL_TIME;
      case 68: return FIRE_ARRIVAL_TIME_MIN;
      case 69: return FIRE_ARRIVAL_TIME_MAX;
      case 70: return HROS;
      case 71: return FROS;
      case 72: return BROS;
      case 73: return RSS;
      case 74: return RADIATIVE_POWER;
      case 75: return HFI;
      case 76: return HCFB;
      case 77: return CURRENT_TIME;
      case 78: return SCENARIO_NAME;
      case 79: return BURN_PERCENTAGE;
      case 80: return TOTAL_PERIMETER_CHANGE;
      case 81: return EXTERIOR_PERIMETER_CHANGE;
      case 82: return ACTIVE_PERIMETER_CHANGE;
      case 83: return AREA_CHANGE;
      case 84: return BURN;
      case 85: return HROS_MAP;
      case 86: return FROS_MAP;
      case 87: return BROS_MAP;
      case 88: return RSS_MAP;
      case 89: return RAZ_MAP;
      case 90: return FMC_MAP;
      case 91: return CFB_MAP;
      case 92: return CFC_MAP;
      case 93: return SFC_MAP;
      case 94: return TFC_MAP;
      case 95: return FI_MAP;
      case 96: return FL_MAP;
      case 97: return CURINGDEGREE_MAP;
      case 98: return GREENUP_MAP;
      case 99: return PC_MAP;
      case 100: return PDF_MAP;
      case 101: return CBH_MAP;
      case 102: return TREE_HEIGHT_MAP;
      case 103: return FUEL_LOAD_MAP;
      case 104: return CFL_MAP;
      case 105: return GRASSPHENOLOGY_MAP;
      case 106: return ROSVECTOR_MAP;
      case 107: return DIRVECTOR_MAP;
      case 108: return CRITICAL_PATH;
      case 109: return CRITICAL_PATH_PERCENTAGE;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<GlobalStatistics>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      GlobalStatistics> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<GlobalStatistics>() {
          public GlobalStatistics findValueByNumber(int number) {
            return GlobalStatistics.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalStateException(
          "Can't get the descriptor of an unrecognized enum value.");
    }
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return ca.wise.project.proto.CwfgmProject.getDescriptor().getEnumTypes().get(0);
  }

  private static final GlobalStatistics[] VALUES = values();

  public static GlobalStatistics valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private GlobalStatistics(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:WISE.ProjectProto.GlobalStatistics)
}

